<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[平面几何]]></title>
    <url>%2F2018%2F01%2F04%2F%E5%B9%B3%E9%9D%A2%E5%87%A0%E4%BD%95%2F</url>
    <content type="text"><![CDATA[点12345struct Point&#123; double x,y; Point()&#123;&#125; Point(double _,double __)&#123;x=_,y=__;&#125;&#125;; 线123456struct Line&#123;//使用向量式表示，线上的点X满足X=P+tV，直线t∈R,线段t∈[0,1],射线t&gt;0 Point P;//线上一点 Vector V;//方向向量，已知线上两个不同点A、B，则V=B-A Line()&#123;&#125; Line(Point _,Vector __)&#123;P=_,V=__;&#125;&#125;; 圆12345struct Circle&#123; Point c; double r; Circle(Point _,double __)&#123;c=_,r=__;&#125;&#125;; 多边形1234struct Polygon&#123; int n; Point P[N];&#125;; 向量1typedef Point Vector; 四则运算1234Vector operator + (Vector A,Vector B)&#123;return Vector(A.x+B.x,A.y+B.y);&#125;Vector operator - (Vector A,Vector B)&#123;return Vector(A.x-B.x,A.y-B.y);&#125;Vector operator * (Vector A,double p)&#123;return Vector(A.x*p,A.y*p);&#125;Vector operator / (Vector A,double p)&#123;return Vector(A.x/p,A.y/p);&#125; 点积与叉积点积几何意义：$U$在$V$上的投影的模长乘$V$的模长，可以判断向量垂直 叉积几何意义：以$U$、$V$为邻边构成的平行四边形的有向面积，可以判断向量平行 把点积和叉积组合到一起可以判断两个向量的位置关系 12double Dot(Vector A,Vector B)&#123;return A.x*B.x+A.y*B.y;&#125;//|A||B|cos(θ)double Cross(Vector A,Vector B)&#123;return A.x*B.y-A.y*B.x;&#125;//|A||B|sin(θ) 模长、投影与夹角123double Length(Vector A)&#123;return sqrt(Dot(A,A));&#125;double Shade(Vector A,Vector B)&#123;return Dot(A,B)/Length(B);&#125;double Angle(Vector A,Vector B)&#123;return acos(Dot(A,B)/Length(A)/Length(B));&#125; 极角1double Polar(Vector A)&#123;return atan2(A.y,A.x);&#125; 旋转与单位法向量12345Vector Rotate(Vector A,double rad)&#123;return Vector(A.x*cos(rad)-A.y*sin(rad),A.x*sin(rad)+A.y*cos(rad));&#125;Vector Normal(Vector A)&#123;//左转90°，长度归1 double L=Length(A); return Vector(-A.y/L,A.x/L);&#125; 圆距离两点间距离1double DistanceToPoint(Point A,Point B)&#123;return Length(A-B);&#125; 点到直线间距离1double DistanceToLine(Line A,Point B)&#123;return fabs(Cross(B-A.P,A.V)/Length(A.V));&#125; 交点两直线交点1234Point GetLineIntersection(Line A,Line B)&#123; double t=Cross(B.V,A.P-B.P)/Cross(A.V,B.V); return A.P+A.V*t;&#125; 点在多边形内判定12 面积多边形的有向面积123456double PolygonArea(Point A)&#123; double area=0; for(int i=1;i&lt;A.n-1;i++) area+=Cross(A[i].P-A[0].P,A[i+1].P-A[0].P); return area/2;&#125; 凸包包围给定点集的面积最小的凸多边形 Andrew算法分别维护上下凸壳，然后合并 1234567891011121314void ConvexHull(Point *p,int n,Point* ch)&#123; sort(p,p+n,cmp);//按照x、y为第一、二关键字排序 int m=0; for(int i=0;i&lt;n;i++)&#123; while(m&gt;1&amp;&amp;Cross(ch[m-1]-ch[m-2],p[i]-ch[m-2])&lt;=0) m--;//右手定则，直到方向在左边为止 ch[m++]=p[i]; &#125; int k=m; for(int i=n-2;i&gt;=0;i--)&#123; while(m&gt;k&amp;&amp;Cross(ch[m-1]-ch[m-2],p[i]-ch[m-2])&lt;=0) m--; ch[m++]=p[i]; &#125; if(n&gt;1) m--;&#125; 半平面交旋转卡壳公式与性质Pick公式在格点图上，整点多边形的面积=内部整点个数+边上的整点个数/2−1 欧拉公式简单多面体的顶点数V，面数F与棱数E之间存在如下关系 V-E+F=2特别的，在平面图上：点数V，将平面分成的互不联通的区域数F，边数E与联通块个数W之间，有 V-E+F=1+W三角形的心 外心：外接圆圆心，三条中垂线交点 内心：内接圆圆心，三条角平分线交点 重心：三条中线交点，注意其物理性质 垂心：三条垂线交点 旁心：一个外交平分线与另外两个内角平分线交点 平面多边形的重心：所以顶点x/y坐标的平均数]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[K-D Tree]]></title>
    <url>%2F2018%2F01%2F04%2FK-D%20Tree%2F</url>
    <content type="text"><![CDATA[$K-D$ $Tree$是一种分割$k$维数据空间的数据结构，主要应用于多维空间关键数据的搜索 基本用法节点$K-D$ $Tree$中的一个节点储存了一个$K$维空间域和一个$K$维的点坐标 1d:点各维坐标 mi:空间各维坐标的min mx:空间各维坐标的max c:左右儿子 以下以$2-D$ $Tree$为例 构树1234567891011121314151617181920212223242526#define cmin(a,b) (a&gt;b?a=b:a)#define cmax(a,b) (a&lt;b?a=b:a)struct abc&#123; int ww[2]; int&amp; operator[](int x)&#123;return ww[x];&#125; &#125;a[N]; bool operator &lt;(abc x,abc y)&#123;return x[D]&lt;y[D];&#125;void update(int x)&#123; for(int i=0;i&lt;2;i++)&#123; if(c[x][0]) cmin(mi[x][i],mi[c[x][0]][i]),cmax(mx[x][i],mx[c[x][0]][i]); if(c[x][1]) cmin(mi[x][i],mi[c[x][1]][i]),cmax(mx[x][i],mx[c[x][1]][i]); &#125;&#125;int build(int l,int r,int x)//循环选取维度 &#123; D=x;int m=l+r&gt;&gt;1; nth_element(a+l,a+m,a+r+1);//使用某一维坐标的中位数作为切分点 for(int i=0;i&lt;2;i++) d[m][i]=mi[m][i]=mx[m][i]=a[m][i]; if(l&lt;m) c[m][0]=build(l,m-1,x^1); if(r&gt;m) c[m][1]=build(m+1,r,x^1); update(m);return m;&#125; 估价算出目标点到当前查询区域距离的下界或上界 1234567891011//now:需估价的矩形区域 P:目标点//曼哈顿最小for(int i=0;i&lt;2;i++)&#123; ret+=max(mi[now][i]-P[i],0); ret+=max(P[i]-mx[now][i],0);&#125;//曼哈顿最大//欧几里得最小//欧几里得最大 插入123456void insert(int &amp;now,int x)&#123;//同平衡树 if(!now)&#123;now=++n;for(int i=0;i&lt;2;i++) d[now][i]=mi[now][i]=mx[now][i]=P[i];return ;&#125; int tmp=P[x]&gt;=d[now][x]; insert(c[now][tmp],x^1); update(now);&#125; 查询12345678910int Dis(int now)&#123;return abs(d[now][0]-P[0])+abs(d[now][1]-P[1]);&#125;void query(int x)&#123; int tmp=Dis(x),dl[2]; for(int i=0;i&lt;2;i++) dl[i]=c[x][i]?getdis(c[x][i]):INF;//估价函数，走较优的子树 cmin(ans,tmp);tmp=dl[0]&gt;=dl[1]; if(dl[tmp]&lt;ans) query(c[x][tmp]),tmp^=1;//不能更新答案直接跳过 if(dl[tmp]&lt;ans) query(c[x][tmp]);&#125;]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生成树]]></title>
    <url>%2F2017%2F12%2F29%2F%E7%94%9F%E6%88%90%E6%A0%91%2F</url>
    <content type="text"><![CDATA[联通图$G$的生成树是包含$G$中所有顶点的极小连通子图 最小生成树性质 切割性质：在各边边权均不相同时，对于连接图$G$中两个非空点集的最短边$e$，$G$的任意$MST$一定包含$e$ 回路性质：在各边边权均不相同时，对于图$G$中的任意回路的最长边$e$，$G$的任意$MST$一定不包含$e$ Kruskal算法贪心地将边从小到大加入 Prim算法$Dijkstra$算法的变形可以处理负权边 增量最小生成树在$MST$中新加入边$e=(u,v)$后，图中恰好包含一个环根据回路性质，删掉$max(e,MST$中$(u,v))$即可 最小瓶颈生成树最小化最大边权值$MST$就是一颗最小瓶颈生成树 次小生成树次小生成树可以由$MST$加一条边再删一条边得到 $dfs$预处理可以做到$O(n^2)$ 最小树形图朱刘算法斯坦纳树给定图$G$中若干关键点，使得它们联通 最小斯坦纳树生成树计数矩阵树定理prufer序列prufer序列]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大路]]></title>
    <url>%2F2017%2F12%2F29%2F%E5%A4%A7%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[最短路 FloydDijkstraSpfa距离欧几里得距离：两点间的真实距离曼哈顿距离：各维坐标差绝对值的和，各维度独立，可以分开处理切比雪夫距离：各维坐标差绝对值的最大值，坐标系旋转$45°$可以和曼哈顿距离互相转化汉明距离：两个字符串不同的位数 各种距离 路径]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>路径</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线性代数]]></title>
    <url>%2F2017%2F12%2F28%2F%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%2F</url>
    <content type="text"><![CDATA[矩阵矩阵是一个向量集,描述一个线性变换 运算 加减：对应元素相加减 数乘：每个元素乘一个数 转置：将矩阵的行列交换 乘法：$A:m \times n$ 矩阵，$B:n \times p$ 矩阵，$C=AB:m \times p$ 矩阵 $C_{ij}=\sum\limits_{k=1}^{n}A_{ik}B_{kj}$ 结合律：$(AB)C=A(BC)$左分配律：$(A+B)C=AC+BC$右分配律：$C(A+B)=CA+CB$不满足交换律 特殊的矩阵单位矩阵$E$ $ \left[ \begin{matrix} 1 &amp; 0 &amp; 0 \\\ 0 &amp; 1 &amp; 0 \\\ 0 &amp; 0 &amp; 1 \end{matrix} \right]$ 若$AB=E$，则$A$、$B$互为逆矩阵 循环矩阵 $ \left[ \begin{matrix} 1 &amp; 2 &amp; 3 \\\ 3 &amp; 1 &amp; 2 \\\ 2 &amp; 3 &amp; 1 \end{matrix} \right]$ 循环矩阵的线性运算及乘积仍是循环矩阵 满足乘法交换律：$AB=BA$ 循环矩阵的逆仍是循环矩阵 行列式对$n$阶方阵 $\left[\begin{matrix} a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n}\\ a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n}\\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots\\ a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}\\\end{matrix}\right]$ $=\sum\limits_{j_1…j_n}^{}(-1)^{r(j_1…j_n)}a_{1j_1}…a_{nj_n}$ 其中$j_1…j_n$为n元排列$r(j_1…j_n)$表示其中的逆序对个数 特征值与特征向量]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字符串基础]]></title>
    <url>%2F2017%2F12%2F28%2F%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[字符串哈希$hash(i)=(hash(i-1)*B+s[i])$%$P$$B$：进制数 参考：$457,251,2333,149,373$$P$：模数 参考：$987654323,666666667,23456789$ 姿势双模、自然溢出从$i$开始长为$len$子串的哈希值：$hash(i+len-1)-hash(i-1)*fac(len)$$hash$+二分求$LCP$ KMP算法在文本串$S$中匹配模板串$T$ next()函数$next(i)$表示状态$i$失配后应转移到的状态具体来说，$next(i)$表示前$i$位串的前缀和后缀的最长匹配（不包括$i$）预处理$next()$相当于$T$自我匹配性质：若$next(i)!=0$，且$i$%$(i-next(i))=0$，则字符串前$i$位循环，循环节长度为$i-next(i)$，循环次数为$i/(i-next(i))$ 123456789101112131415void getnext()&#123;//start with 1 for(int i=2,j=0;i&lt;=m;i++)&#123; while(j&amp;&amp;p[i]!=p[j+1]) j=nex[j]; if(p[i]==p[j+1]) j++; nex[i]=j; &#125;&#125;void kmp()&#123; for(int i=1,j=0;i&lt;=n;i++)&#123; while(j&amp;&amp;s[i]!=p[j+1]) j=nex[j]; if(s[i]==p[j+1]) j++; if(j==m) ans.push_back(i-m+1); &#125;&#125; 扩展KMP算法对文本串$S$和模板串$T$，记$ext(i)$表示$Suffix(S,i)$与$T$的$LCP$长度 next()函数$next(i)$表示$Suffix(T,i)$与$T$的$LCP$长度 12345678910111213141516171819202122void getnext()&#123;//start with 1 int mx=mxp=0; for(int i=2;i&lt;=n;i++)&#123; mxp=mxp&gt;i?mxp:i; nex[i]=min(mxp-i,nex[i+1-mx]); while(T[nex[i]+1]==T[nex[i]+i]) nex[i]++; if(i+nex[i]&gt;mxp) mx=i; mxp=mx+nex[mx]; &#125;&#125;void exkmp()&#123; int mx=mxp=0; for(int i=1;i&lt;=n;i++)&#123; mxp=mxp&gt;i?mxp:i; ext[i]=min(mxp-i,nex[i+1-mx]); while(T[ext[i]+1]==S[ext[i]+i]) ext[i]++; if(i+ext[i]&gt;mxp) mx=i; mxp=mx+ext[mx]; &#125;&#125; Trie树让$LCP$相同的字符串共用结点，并在叶子结点上附加信息 12345678910#define idx s[i]-'a'void insert(int v=1)&#123; int x=0,len=strlen(s); for(int i=0;i&lt;len;i++)&#123; if(!c[x][idx]) c[x][idx]=++tot; x=c[x][idx]; &#125; dang[x]=v;&#125; AC自动机在文本串$S$中匹配模板串集合$T={T_1,T_2,…,T_k}$将模板串集合$T$建成一颗$Trie$树 转移函数$trans(x,c)$为从状态$x$沿字符$c$的$Trie$边走到的点$fail(x)$，失配函数，指向的点$y$满足：$str(y)$为$str(x)$的最长后缀 构造按$bfs$序构造假设已经得到了$fail(u)$，有$v=trans(u,c)$，现在求$fail(v)$只需要从$u$的后缀中找到第一个有$c$的出边的点 123456789void getfail()&#123; l=0,q[r=1]=0,fail[0]=-1; while(l!=r)&#123; int x=q[++l]; for(int i=0;i&lt;26;i++) if(c[x][i]) q[++r]=c[x][i],fail[c[x][i]]=!x?0:c[fail[x]][i]; else c[x][i]=!x?0:c[fail[x]][i]; &#125; &#125; 最小表示法对于一个环状字符串，将其断开可以得到n个串，其中字典序最小的串称为最小表示 123456789101112int mr()&#123; int i=0,j=1,k=0; while(i&lt;n&amp;&amp;j&lt;n)&#123; for(;k&lt;n&amp;&amp;s[i+k]==s[j+k];k++); if(k==n) return i; if(s[i+k]&gt;s[j+k]) i+=k+1; else j+=k+1; if(i==j) j++; &#125; return min(i,j);&#125;]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[noip2017滚粗记]]></title>
    <url>%2F2017%2F12%2F28%2Fnoip2017%E6%BB%9A%E7%B2%97%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Day -INF 停课了…… Day0 早上打了最后一场模拟赛（为接下来的滚粗埋下了伏笔） 看了加油视频……rp++++拍了奇♂怪的合影…… 复习了一些奇怪的东西~~~rp++? Day1 还是熟悉的RZYZ…… tty和杜教进行了亲切的交流…… 宿舍只有5人……下铺……rp++ GG…… 来到老干部活动中心？突然兴奋 Day2 看T1 sx题(GG)T2 sx题(GG)T3 毒瘤数据结构]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>noip</tag>
        <tag>滚粗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后缀姐妹花]]></title>
    <url>%2F2017%2F12%2F26%2F%E5%90%8E%E7%BC%80%E5%A7%90%E5%A6%B9%E8%8A%B1%2F</url>
    <content type="text"><![CDATA[后缀数组$sa(i)$：排第$i$名的后缀$rank(i)$：$Suffix(i)$在所有后缀中的名次 倍增法对每个字符开始的长度为$2^k$的子字符串进行排序，求出$rank()$，当$2^k&gt;n$后，此时的$rank()$便是最后的结果每一次排序利用上次两个长度为$2^{k-1}$的字符串的$rank()$作为第一、第二关键字，进行基数排序 12345678910111213141516171819int cmp(int *r,int a,int b,int l)&#123;return (r[a]==r[b])&amp;&amp;(r[a+l]==r[b+l]);&#125;//比较第一、二关键字void DA(int n,int m=128)&#123;//n+1并人工添加一个较小的字符以避免cmp越界 int i,k,p,*x=rk,*y=rk2; for(i=0;i&lt;m;i++) c[i]=0;//对长度为1的字符串基数排序 for(i=0;i&lt;n;i++) c[x[i]=s[i]]++; for(i=1;i&lt;m;i++) c[i]+=c[i-1]; for(i=n-1;i&gt;=0;i--) sa[--c[x[i]]]=i; for(k=1,p=1;p&lt;n;k&lt;&lt;=1,m=p)&#123;//max(rank())&lt;p for(p=0,i=n-k;i&lt;n;i++) y[p++]=i;//不存在第二关键字的排在前面 for(i=0;i&lt;n;i++) if(sa[i]&gt;=k) y[p++]=sa[i]-k;//利用上一次求得的SA对第二关键字排序 for(i=0;i&lt;m;i++) c[i]=0;//对第一关键字基数排序 for(i=0;i&lt;n;i++) c[x[y[i]]]++; for(i=1;i&lt;m;i++) c[i]+=c[i-1]; for(i=n-1;i&gt;=0;i--) sa[--c[x[y[i]]]]=y[i]; swap(x,y),p=1,x[sa[0]]=0; for(i=1;i&lt;n;i++) x[sa[i]]=cmp(y,sa[i-1],sa[i],k)?p-1:p++; &#125;//rank()保存在x数组中，p=不同的字符串个数&#125; LCP$height(i)$：$LCP(Suffix(sa[i]),Suffix(sa[i-1]))$$h(i)$：$height(rank[i])$性质： 计算性质：$h(i) \geq h(i-1)-1$，逐一计算即可 123456789101112131415161718192021void calh(int n)&#123; int i,j,k=0; for(i=1;i&lt;=n;i++) rk[sa[i]]=i; for(i=0;i&lt;n;height[rk[i++]]=k) for(k?k--:0,j=sa[rk[i]-1];s[i+k]==s[j+k];k++);&#125;void RMQ()&#123; for(int i=1;i&lt;=n;i++) f[i][0]=height[i]; for(int j=1;j&lt;=20;j++) for(int i=1;i+(1&lt;&lt;j)-1&lt;=n;i++) f[i][j]=min(f[i][j-1],f[i+(1&lt;&lt;(j-1))][j-1]); &#125;int lcp(int a,int b)&#123; int x=rk[a],y=rk[b]; if(x&gt;y) swap(x,y);x++; int k=log(y-x+1)/log(2); return min(f[x][k],f[y-(1&lt;&lt;k)+1][k]); &#125; 后缀自动机确定性有限状态自动机$DFA$由以下$5$部分组成 $alpha$：字符集 $state$：状态集合 $init$：初始状态集合 $end$：终止状态集合 $trans$：状态转移函数 $DFA$的功能是识别字符串$SAM$本质上是一个$DFA$，可以识别$S$的所有子串 最简状态表示现在需要把$S$建成$SAM$考虑最简单的实现方式：将每个后缀插入一颗$Trie$树但是这样太$naive$了，我们考虑合并状态 right()对于$S$的一个子串$s1$，$right(s1)=s1$在$S$中所有出现的结束位置集合将所有$right()$集相同的状态合并 新的状态考虑其与原先暴力表示状态的不同 代表的子串：新的状态代表的子串为右端点相同，长度递增的多种子串，记长度区间为$[min(x),max(x)]$ 结论：状态的$right()$集合可以构成一个树形结构的关系，称其为$fail$树 其中状态$x$在树上的父亲$fa$满足：$right(fa)\nsupseteqq right(x)$，且$|right(fa)|$最小，并有$min(x)=max(fail(x))+1$ 状态数：可以证明是线性的 性质：一个子串的出现次数，就是其对应状态的$right()$集大小 转移函数$trans(x,str)$为从状态$x$读入字符串$str$后到达的状态记$ST(str)=trans(init,str)$ 构造增量法让新加入的子串都被状态代表，而且$trans$边能够正确转移 1234567891011121314void add(int x)&#123; int c=a[x],np=++tot,p=last;last=np; step[np]=x; for(;p&amp;&amp;!ch[p][c];p=fail[p]) ch[p][c]=np; if(!p) fail[np]=root; else&#123; int q=ch[p][c]; if(step[p]+1==step[q]) fail[np]=q; else&#123; int nq=++tot;step[nq]=step[p]+1; memcpy(ch[nq],ch[q],sizeof(ch[q])); fail[nq]=fail[q],fail[np]=fail[q]=nq; for(;ch[p][c]==q;p=fail[p]) ch[p][c]=nq; &#125; &#125;&#125;]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>字符串</tag>
        <tag>后缀</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线性规划]]></title>
    <url>%2F2017%2F12%2F23%2F%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[最大化或最小化一个受限于一组有限的线性约束的线性函数 性质标准型最大化$\quad \sum\limits_{j=1}^{n} c_jx_j$ 满足约束$~$ $\sum\limits_{j=1}^{n} a_{ij}x_j \le b_i,\ i=1,2,…,m$ $~$ $~$ $~$ $~$ $~$ $~$ $~$ $x_j \ge 0,\ j=1,2,…,n$ 转化 若目标函数要求取最小值，可以取相反数变成取最大值 对于限制条件$f(x_1,x_2,…,x_n)\geq b$，可以用不等式$-f(x_1,x_2,…,x_n)\leq -b$描述 对于限制条件$f(x_1,x_2,…,x_n)=b$，可以用两个不等式$f(x_1,x_2,…,x_n)\leq b$，$f(x_1,x_2,…,x_n)\geq b$描述 对于无限制的变量$x$，可以将其拆成两个非负变量$x_0$，$x_1$，使得$x=x_0-x_1$ 松弛型最大化$\quad \sum\limits_{j=1}^{n} c_jx_j$ 满足约束$~$ $x_{i+n}=b_i - \sum\limits_{j=1}^{n} a_{ij}x_j,~i=1,2,…,m$$~$ $~$ $~$ $~$ $~$ $~$ $~$ $x_j \ge 0,\ j=1,2,…,n+m$ 基变量：等式左侧的所有变量非基变量：等式右侧的所有变量 单纯性法通过变量的代换，实现在解空间内沿着边界朝着目标函数增大的方向移动 基本解：非基变量值为$0$，基变量值为$b_i$可行解：使得$m$个限制条件能够满足的一组非基变量 转轴选择一个基变量$X_l$，将其与非基变量$X_e$互换根据$Bland$法则，选择系数大于$0$且标号最小的非基变量 初始化如果基本解不是可行解，即存在$b_i&lt;0$在所有$bi&lt;0$的约束中随机选一个作为$xl$，再随机选一个$a_{le}&lt;0$的作为$x_e$，然后$Pivot(l,e)$后$b_i$就变正了 对偶性]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[各种图]]></title>
    <url>%2F2017%2F12%2F21%2F%E5%90%84%E7%A7%8D%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[有向无环图如果一个有向图无法从某个顶点出发经过若干条边回到该点，则这个图是一个有向无环图$DAG$的生成树个数等于入度非零节点的入度积 拓扑排序$DAG$顶点的线性序列 补图将完全图去除图$G$的边集后得到的图 反向图将有向图$G$的边反向后得到的图 分层图平面图&amp;对偶图竞赛图将一个完全无向图的边定向后得到的有向图 兰道定理比分序列：把竞赛图每一个点的出度从小到大排列得到的序列一个长度为$n$的序列$s$$(s_1≤s_2≤…≤s_n,n≥1)$是合法的比分序列当且仅当 {\forall}1\leq k \leq n~,~\sum\limits_{i=1}^{k}s_i \geq {k\choose2}特别地，当$k=n$时式子取等号 区间图&amp;弦图&amp;完美图仙人掌图]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>理性愉悦</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图的连通性]]></title>
    <url>%2F2017%2F12%2F21%2F%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7%2F</url>
    <content type="text"><![CDATA[引入联通分量在无向图中，可达关系满足自反性，对称性和传递性，是一个等价关系从等价关系可以定义等价类，把相互可达的节点称为一个联通分量 无向图割点和桥如果删除某个点$x$后，$G$的联通分量数目增加，称$x$为图的割点如果删除某条边$E$后，$G$的联通分量数目增加，称$E$为图的桥 $x$为割点的条件$x$是dfs树的根，且x有两个及以上子节点$x$非根，且$x$存在子节点$v$，满足$low[v]\geq dfn[x]$ $E=(u,v)$为桥的条件$E$不存在重边满足$low[v]&gt; dfn[x]$ 点双联通分量若$G$中无割点，称$G$为点双连通图。$G$中任意两点间存在至少两条不经过重复点的路径若$G$中无桥，称$G$为边双连通图。$G$中任意两点间存在至少两条不经过重复边的路径除了桥外，每条边恰好属于一个边双联通分量，但不同点双联通分量可能会有公共点，可以证明公共点最多只有一个且为割点 有向图强连通分量若$G$中任意两点可达，称$G$为强连通图对$SCC$缩点后原图变为$DAG$]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>连通性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[欧几里得相关]]></title>
    <url>%2F2017%2F12%2F19%2F%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[欧几里得算法不断将两数规模变小，直到能直接判断解依据：$gcd(a,b)=gcd(b,a$%$b)，gcd(a,0)=a$递归次数最多的是斐波那契数$f(n)$和$f(n-1)$ $O(logn)$ 扩展欧几里得算法记$d=gcd(a,b)$，求出$ax+by=d$的一组解$(x,y)$，保证满足$|x|+|y|$最小其任意解为$(x+kb’,y-ka’)$，$a’=a/d$，$b’=b/d$，$k$取任意整数对于一般的线性方程$ax+by=c$，若$!(d|c)$则无解，否则$x \times \frac{c}{d}$，$y \times \frac{c}{d}$即可 $O(logn)$ 类欧几里得算法形式1$f(a,b,c,n)=\sum\limits_{i=0}^n \lfloor \frac{ai+b}{c}\rfloor$ 当$a\geq c$或$b \geq c$时$f(a,b,c,n)=$$\frac{n(n+1)}{2}\lfloor\frac{a}{c}\rfloor+(n+1)\lfloor\frac{b}{c}\rfloor+f(a$%$c,b$%$c,c,n)$ 当$a&lt;c$且$b&lt;c$时令$m= \lfloor \frac{an+b}{c}\rfloor$$f(a,b,c,n)=$$nm-f(c,c-b-1,a,m-1)$ 推导]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>数论</tag>
        <tag>欧几里得</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络流]]></title>
    <url>%2F2017%2F12%2F19%2F%E7%BD%91%E7%BB%9C%E6%B5%81%2F</url>
    <content type="text"><![CDATA[概念$V$：点集 $E$：边集 $G=(V,E)$：图 $S$：源点 $T$：汇点 对于每条边$(u,v)$，有容量$c(u,v)$和流量$f(u,v)$，满足$0\leq f(u,v) \leq c(u,v)$ 性质$1、$容量限制：$f(u,v)&lt;=c(u,v)$ $2、$反对称性：$f(u,v)=-f(v,u)$ $3、$流量平衡：$\sum f(u,i)=\sum f(i,v)$ 满足以上三个性质，称为可行流 最大流流量最大的可行流 残量网络定义残量网络的流量$r(u,v)=c(u,v)-f(u,v)$ 即一条弧还能流过的流量 增广路残量网络中一条由$S$到$T$的路径 增广路定理：设$flow$是$G$的一个可行流，若不存在增广路，$flow$即为最大流前向弧&amp;后向弧分别表示残量网络与退流网络 增流&amp;退流推进和修正流量 last最大流的正确性依赖于它的每一条 $S-T$ 流都与一种实际方案一一对应 Isap算法marks$1.d[i]$：$i$到$T$的最短距离，可以$bfs$预处理(似乎没有并什么用)$2.GAP$优化：当$S$和$T$不联通时不存在增广路，可以直接退出循环$num[x]$表示$d[i]=x$的节点数量，初始化$num[0]=$总节点数$3.$当前弧优化：保存一个点已经尝试过的邻接边之前处理过的邻接边是不需要重新处理的(残量网络中的边只会越来越少)$last[i]$表示当前弧的编号 时间复杂度上界：$O(n^2m)$容量均为1：$O(min(n^{2/3},m^{1/2})*m)$二分图：$O(\sqrt{n} m)$ 详解 费用流每条边除流量限制外还有费用$c$，每流一个单位流量就要增加$c$的费用 一般是最小费用最大流或最小费用可行流 $spfa$单/多路增广 最小割割边集$C$使得$V$中的点分为两部分 割的容量割中弧的流量总和 最大流最小割定理一个$S-T$流的最大流等于其$S-T$最小割的容量 判定跑出最大流后，在残量网络上跑$Tarjan$，求$SCC$ 一条满流边$(u,v)$可以出现在最小割集中，当且仅当$u$,$v$不在一个$SCC$中 一条满流边$(u,v)$必定出现在最小割集中，当且仅当$u$与$S$在一个$SCC$里，并且$v$与$T$在一个$SCC$里 易知$S$与$T$一定不在一个$SCC$中 最小割树任意两点之间的最小割，不同的只有$n-1$个，它们构成一个最小割树 定理$1$：$mincut(a,b)\geq min${$mincut(a,c_1),mincut(c_1,c_2),…,mincut(c_k,b)$}定理$2$：令$(s,t)$是$(u,v)$在树上简单路径的所有边中$mincut$最小的，那么$mincut(u,v)=mincut(s,t)$ 求解方法 随便找两个点作为$S$和$T$，跑$mincut$ dfs划分出$S$集和$T$集，更新答案 递归处理$S$集和$T$集 上下界网络流分类 无源汇除$S$、$T$都要求满足流量平衡 有源汇所有点都要求满足流量平衡 无源汇可行流建图 建立附加源点$ss$和附加汇点$tt$ 连边：$(u,v,up-down)$ 记$d(i)=\sum down(x,i)-\sum down(i,y)$ 若$d(i)&gt;0$，连边$(ss,i,d(i))$，否则连边$(i,tt,-d(i))$ 求解方法 跑$ss$到$tt$的最大流 若满流，那么一定存在一种可行流 此时，原图中每一条边的流量应为新图中对应的边的流量$+down$ 有源汇可行流建图 在原图中添加一条边$(T,S)$，流量限制为$[0,INF]$，即让$S$和$T$也满足流量平衡条件，改造成无源汇的网络流图 求解方法 同无源汇可行流 有源汇最大流建图 同有源汇可行流 求解方法 跑有源汇可行流 再跑一次$S$到$T$的最大流，即为答案 有源汇最小流建图 同无源汇可行流 求解方法 跑$ss$到$tt$的最大流 添加$(T,S)$，流量限制为$[0,INF]$ 再跑一次$ss$到$tt$的最大流，判断是否存在可行流 答案即为$(T,S)$的实际流量 有源汇最小费用可行流建图 建立附加源点$ss$和附加汇点$tt$ 连边：$(u,v,up-down,cost)$ 记$d(i)=\sum down(x,i)-\sum down(i,y)$ 若$d(i)&gt;0$，连边$(ss,i,d(i),0)$，否则连边$(i,tt,-d(i),0)$ 添加$(T,S)$，流量限制为$[0,INF]$，费用为$0$ 求解方法 跑$ss$到$tt$的最小费用最大流 答案即为（求出的费用+每条边的$down*cost$） 建模 多源多汇增加超级源汇$S’$和$T’$连边：$(S’,S,INF),(T,T’,INF)$ 结点容量设结点$x$的结点容量为$c$将结点$x$拆成$x_{in}$和$x_{out}$连边：$(x_{in},x_{out},c)$把到达$x$的弧改为到达$x_{in}$,从$x$出发的弧改为从$x_{out}$出发 最大权闭合子图从带点权图$G$中选出一个子图，对于$V$中任意一个结点，其后续节点都在$V$中，最大化$V$的权值和连边：$(S,i,c_i),c_i&gt;0$，$(i,T,-c_i),c_i&lt;0$，$(u,v,INF)$$ans=$正权点和-最小割 最大密度子图从$G$中选出一个子图，最大化$\frac{|E|}{|V|}$考虑$01$分数规划，二分答案为$k$将边作为左侧顶点，权为$1$：点作为右侧顶点，权为$-k$根据边和点的依赖关系转化成最大权闭合子图，$ans&gt;0$则增大$l$ 最小割建图先累加所有收益，再最小化舍弃值一般拆成$S$集和$T$集考虑，对应两种选择。这样就会带来冲突，也就是需要割的边$check$不同情况，检验建图正确性 Tips 技巧 枚举&amp;二分答案 合并流量将起点终点相同的边流量累加起来]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二分图]]></title>
    <url>%2F2017%2F12%2F19%2F%E4%BA%8C%E5%88%86%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[把无向图$G$划分为两个不相交顶点集$U$和$V$，使得每一条边都分别连接$U$、$V$ 中的顶点，即不含有奇环的图 概念二分图判定非联通图是二分图当且仅当其每个联通分量都是二分图 匹配边集$E$满足其中任意两条边没有公共顶点 最大匹配所有匹配中所含匹配边数最多的匹配 完备匹配某个匹配中所有的顶点都是匹配点 最大权匹配带权二分图所有匹配中权值最大的匹配 扩展最小点覆盖选出一个点集，使每条边都有顶点在其中，且点数最少最小点覆盖=最大匹配 最小边覆盖选出一个边集，使每个顶点都有边在其中，且边数最少最小边覆盖=二分图点数-最大匹配 最大点独立集选出一个点集，使所有点之间两两无边，且点数最多最大点独立集=二分图点数-最大匹配 最小路径覆盖在有向图$G$中用最少的不相交路径把图中所有点覆盖拆点建二分图：对于$(x,y)$，连边$(x_1,y_2)$最小路径覆盖=二分图点数-最大匹配 最小链覆盖在有向图$G$中用最少的路径把图中所有点覆盖对$DAG$求出传递闭包后，问题转化为最小路径覆盖最小链覆盖=二分图点数-最大匹配 最长反链反链：点集$V$，对于$\forall (u,v)\in V$，满足$u$不能到达$v$且$v$不能到达$u$ $Dilworth$定理：最长反链=最小链覆盖 最大团选出一个点集，使所有点之间两两有边，且点数最多最大团=补图的最大点独立集 以上推广到带权形式也是类似的]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[noip2016酱油记]]></title>
    <url>%2F2016%2F05%2F08%2Fnoip2016%E9%85%B1%E6%B2%B9%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Day -INF大概前一个月开始翘部分晚自习，后来出去培训了一周，在校学习了一周，一共停课了两周，每天都有新的收获，感觉信心满满……变得更弱了 Day 0似乎是中午出发的，反正到日照一中已经很晚了……到了之后排了n长时间的队抽考场……抽之前希望在本校考（考点除了日照一中还有曲阜师范大学），抽完后发现在曲师，rp—，跟本校神犇连号，rp—……不过本校在曲师的人比较多，有教练带队……去宿舍只有上铺了……rp—，第一次睡上铺……表示不会爬梯子……rp-=INF Day 0.5似乎看了看板子……反正非常颓……宿舍有人说话……差不多12点睡的觉 Day 1考场环境就不描述了，反正没出什么意外……打开压缩包对着题目名字猜内容……rp—密码为什么这么复杂啊……rp—坐在menci斜对面，太强啦！，rp— 开始看题，第一题为什么这么长啊，花了很长时间读完后发现是sb题……开始看第二题……瞬间吓尿了……完全不可做啊……这才是T2啊……于是发现暴力lca只有25分，我当时lca还不太熟，感觉还需要调，就准备写20分特判……看第三题发现是期望……感觉心态崩了……啥也不会……振作了一下后，发现28分不需要概率知识…… 定下了100+20+28的目标，然后就码码码，但是我太弱了，T1还调试了一会……完成计划后我又YY了一波T2的链部分分做法，GG最后检查了一下出考场了 出考场后发现T3直接输出了int……丢掉了28分……心态再次爆炸 Day 1.5舍友都出去颓了……我大概睡到了3点……睡醒后在校园里游荡，水SDOI群……去洗了个澡冷静了一下……晚上仍然颓颓颓 Day 2在去考场的车上我复习了一下数论……我记得复习了一周以前刚学的杨辉三角…… 看到T1秒想杨辉三角……似乎组合数我只学过这一个东西……我看到T2范围这么大肯定不可做，于是看了看暴力分，我居然开始YY set做法……发现堆就可以了……其实堆暴力能过65，但是我连时间戳都不会打……只写了最暴力的25……我还花了一些时间脑补了一下隔几个输出是为什么……T3完全不会，感觉要爆零…… 看到T2、T3都这么神，我决定花大部分时间肛T1，争取A掉……我大概脑补了1个多小时，终于调好了……发现最后几组数据需要二维前缀和，我觉得我不太会就没加，然后写完T2 25分和T3 乱搞后大概还有半个小时 这时我去检查了一下T1，然后改错了…… 我发现我的考试策略是非常正确的，就是我太弱了…… 回去的路上感觉只有200+（建立在T1能拿大部分分的基础上），感觉心情比较低落，毕竟以前1=最低也要300分 Day INF上了几天课后期中考，翘掉考试去补课……补课期间某天晚上听说menci测的民间成绩我190……我看了一下程序发现day2T1挂掉了……过了几天出成绩了……最后是100+20+0+25+25+5，成功滚粗]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>noip</tag>
        <tag>滚粗</tag>
      </tags>
  </entry>
</search>
